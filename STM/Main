
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * Copyright (c) 2020 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"
#include <string.h>

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

osThreadId SteppersHandle;
osThreadId OpticSensorsHandle;
osThreadId SerialComHandle;
osMessageQId InstructionsHandle;
osMutexId uartMutexHandle;

/* USER CODE BEGIN PV */
/* Private variables -------------------------------*//////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct stepper{
	GPIO_TypeDef *PinType;
	uint16_t PinD;
	uint16_t PinS;
  };
unsigned int time;
int Run;
int pass;
int state; 
int canRead;
struct stepper Lift;
struct stepper Grab;
struct stepper Left;
struct stepper Right;
uint8_t ADC_valArray[5]; 
uint8_t mySendData[13] = "hello all\r\n";
uint8_t receivedData[13] ="";
QueueHandle_t items; 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
void StartMotorTask(void const * argument);
void StartSensorTask(void const * argument);
void StartCommunicationTask(void const * argument);
                                    
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void delay_ms(unsigned int time){
	unsigned int i, j;
	for(i=0;i<time;i++){
		for(j=1225;j>0;j--){
		}
	}
}
	
void stepperForward(struct stepper step){
	HAL_GPIO_WritePin(step.PinType,step.PinD,GPIO_PIN_SET);
}
void stepperReverse(struct stepper step){
	HAL_GPIO_WritePin(step.PinType,step.PinD,GPIO_PIN_RESET);
}
void stepper_SingleStep(struct stepper step){
	HAL_GPIO_WritePin(step.PinType,step.PinS,GPIO_PIN_SET);
	//delay 1ms
	delay_ms(50);							//50 => fast, 100 => slow
	HAL_GPIO_WritePin(step.PinType,step.PinS,GPIO_PIN_RESET);
}
void stepper_SingleStep_Slow(struct stepper step){
	HAL_GPIO_WritePin(step.PinType,step.PinS,GPIO_PIN_SET);
	//delay 1ms
	delay_ms(100);							//50 => fast, 100 => slow
	HAL_GPIO_WritePin(step.PinType,step.PinS,GPIO_PIN_RESET);
}
void stepperStop(struct stepper step){
	HAL_GPIO_WritePin(step.PinType,step.PinS,GPIO_PIN_RESET);
}
void stepper_ManyStep(struct stepper step,uint16_t n){
	
	for(int i = n+1; i>0; i--){
			stepper_SingleStep(step);
	}
}
void forward_ManyStep(uint16_t n){
	stepperForward(Left);
	stepperReverse(Right);
	for(int i = n+1; i>=0; i--){
		stepper_SingleStep(Right);
		stepper_SingleStep(Left);
	}
}
void stepper_Turn(struct stepper left, struct stepper right, char direction){
	
	//stepperForward(Right)
	//stepperReverse(Left) Forward
	if(direction == 'L' || direction== 'l'){
		stepperForward(right);
		stepperForward(left);
		for(int i=0;i<5;i++){
			stepper_SingleStep(left);
			stepper_SingleStep(right);
	}
	}
	else if(direction == 'R' || direction == 'r'){
		stepperReverse(left);
		stepperReverse(right);
		for(int i=0;i<90;i++){
			stepper_SingleStep(left);
			stepper_SingleStep(right);
	}
	}
	else{
		printf("invalide input");
	}
	
	
}
void grabItem(){
	stepperForward(Grab);
	/*	while(!buttonGrabOpen){ //button not pressed
		stepper_SingleStep(Grab);
		}
	*/
}
void releaseItem(){
		stepperReverse(Grab);
	/*while(!buttonGrabOpen){ //button not pressed
		stepper_SingleStep(Grab);
		}
	*/
}

void zero(){ //zeros the system so its in a known state 
		stepperReverse(Lift);
		stepperReverse(Grab);
	/*while(!buttonLift){ //button not pressed
		stepper_SingleStep(Lift);
		}
		while(!buttonGrabOpen){ //button not pressed
		stepper_SingleStep(Grab);
		}
	*/
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	 
	Lift.PinType = GPIOC;
	Lift.PinD = GPIO_PIN_9; //not working
	Lift.PinS = GPIO_PIN_8; //not working
	
	 
	Grab.PinType = GPIOC;
	Grab.PinD = GPIO_PIN_7; //WOKRING
	Grab.PinS = GPIO_PIN_6; //WOKRING

	
	Left.PinType = GPIOC;
	Left.PinD = GPIO_PIN_0; //WOKRING
	Left.PinS = GPIO_PIN_1; //WOKRING
	
	 
	Right.PinType = GPIOC;
	Right.PinD = GPIO_PIN_2; //working
	Right.PinS = GPIO_PIN_3; //working

	time = 500;
	Run = 0;
	pass = 0;
	state = 0;
	canRead = 0;
	items = xQueueCreate(20, sizeof("L2"));
	
  /* USER CODE END 1 */
	
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM4_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of Steppers */
  osThreadDef(Steppers, StartMotorTask, osPriorityNormal, 0, 128);
  SteppersHandle = osThreadCreate(osThread(Steppers), NULL);

  /* definition and creation of OpticSensors */
  osThreadDef(OpticSensors, StartSensorTask, osPriorityNormal, 0, 128);
  OpticSensorsHandle = osThreadCreate(osThread(OpticSensors), NULL);

  /* definition and creation of SerialCom */
  osThreadDef(SerialCom, StartCommunicationTask, osPriorityNormal, 0, 128);
  SerialComHandle = osThreadCreate(osThread(SerialCom), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of Instructions */
/* what about the sizeof here??? cd native code */
  osMessageQDef(Instructions, 16, uint16_t);
  InstructionsHandle = osMessageCreate(osMessageQ(Instructions), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 5;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* TIM4 init function */
static void MX_TIM4_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 83;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 10;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim4);

}

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper_Left_Direction_Pin|Stepper_Left_Step_Pin|Stepper_Right_Direction_Pin|Stepper_Right_Step_Pin 
                          |UltraSonic_E_Trig_Pin|Stepper_Grab_Step_Pin|Stepper_Grab_Direction_Pin|Stepper_Lift_Step_Pin 
                          |Stepper_Lift_Direction_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|UltraSonic_D_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UltraSonic_C_Trig_Pin|UltraSonic_B_Trig_Pin|UltraSonic_A_Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Stepper_Left_Direction_Pin Stepper_Left_Step_Pin Stepper_Right_Direction_Pin Stepper_Right_Step_Pin 
                           UltraSonic_E_Trig_Pin Stepper_Grab_Step_Pin Stepper_Grab_Direction_Pin Stepper_Lift_Step_Pin 
                           Stepper_Lift_Direction_Pin */
  GPIO_InitStruct.Pin = Stepper_Left_Direction_Pin|Stepper_Left_Step_Pin|Stepper_Right_Direction_Pin|Stepper_Right_Step_Pin 
                          |UltraSonic_E_Trig_Pin|Stepper_Grab_Step_Pin|Stepper_Grab_Direction_Pin|Stepper_Lift_Step_Pin 
                          |Stepper_Lift_Direction_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin UltraSonic_D_Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|UltraSonic_D_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : UltraSonic_E_Echo_Pin */
  GPIO_InitStruct.Pin = UltraSonic_E_Echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(UltraSonic_E_Echo_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : UltraSonic_D_Echo_Pin UltraSonic_C_Echo_Pin UltraSonic_B_Echo_Pin UltaSonic_A_Echo_Pin */
  GPIO_InitStruct.Pin = UltraSonic_D_Echo_Pin|UltraSonic_C_Echo_Pin|UltraSonic_B_Echo_Pin|UltaSonic_A_Echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : UltraSonic_C_Trig_Pin UltraSonic_B_Trig_Pin UltraSonic_A_Trig_Pin */
  GPIO_InitStruct.Pin = UltraSonic_C_Trig_Pin|UltraSonic_B_Trig_Pin|UltraSonic_A_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : optic_test_Pin */
  GPIO_InitStruct.Pin = optic_test_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(optic_test_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
//////////////////////////////////////////////////////////example priority levels low to high: 1 to 10////////////////////////////////////

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
	//HAL_UART_Transmit(&huart2,receivedData, 13 ,10); //transmis data uart,dataArray,size,timeout in ms
	HAL_Delay(100);
	int i = 0;
	char temp[13];
	
	for(int i=0; i<13;i++){ 
		xQueueSend(items,&receivedData[i],10);
		i++;
	}
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
			if(GPIO_Pin == B1_Pin){
				
				//set run to on or off priority 10
				HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
				if(Run ==0){ Run = 1;}
	//			else if(Run==1){Run = 2;}
	//			else if(Run==2){Run = 3;}
				else{Run = 0;}
				delay_ms(10); //debounce 
			}
			else if(GPIO_Pin == 1){///////////////////////UART Interupt for serial communication receive 
				//receive information from pi through serial port /// priority 9
			}
			else{
				__NOP ();
			}
		}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartMotorTask */
/**
  * @brief  Function implementing the Steppers thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	
  for(;;)
  {
    osDelay(1);
		
		
		while(Run==1){   //reverse
			stepperForward(Right);
			stepperReverse(Left); //forward
			stepper_SingleStep(Left);
			stepper_SingleStep(Right);
			
		} 
		while(Run==2){	//Left turn
			stepper_Turn(Left,Right,'L');
			
		}
		while(Run==3){	//Right Turn
			stepper_Turn(Left,Right,'R');
			//stepper_turn(Left, Right, R, 100)
			//Ill comment in a segment to run this as "testing"
			
		}  
		while(Run==4){ //lift
			stepperReverse(Lift);
			stepper_SingleStep(Lift);
			
		}
		while(Run==5){ //lower
			stepperForward(Lift);
			stepper_SingleStep(Lift);
			
		}
		while(Run==6){ //testing 100 step forward
			forward_ManyStep(100);
			Run=0;
		}
  } 
  /* USER CODE END 5 */ 
}

/* USER CODE BEGIN Header_StartSensorTask */
/**
* @brief Function implementing the OpticSensors thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
	
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_valArray,5); 
	uint8_t temp='B';
	uint8_t L = 'L';
	uint8_t F = 'F';
	uint8_t count=0;
  for(;;)
  {
    osDelay(1);
		if(ADC_valArray[2] < 100){Run=0; state=1; } //Stop front optic PA0
		else if(ADC_valArray[1] <100){Run=0; state=1;} //Go optic -> forward for testing PA1
		else if(ADC_valArray[0] <100){Run=0; state=1;} //Left optic -> turn left for testing PA4
		else if(ADC_valArray[3] <100){Run=0; state=1;} //Right optic -> turn left for testing PB0
		else if(count ==0){
			xQueueReceive(items,&temp,10);
			if(temp == F){Run=1;}
			if(temp == L){Run=2;}
			xQueueReceive(items,&count,10);
		}
		else{
		count--;
		}
		delay_ms(100);
  }
  /* USER CODE END StartSensorTask */
}

/* USER CODE BEGIN Header_StartCommunicationTask */
/**
* @brief Function implementing the SerialCom thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void const * argument)
{
  /* USER CODE BEGIN StartCommunicationTask */
  /* Infinite loop */
	uint8_t stub[] = {'F',100,'L',255,'L',255};
  for(;;)
  {
		osDelay(1);
		//HAL_UART_Transmit(&huart2, mySendData, 100 ,10); //transmis data uart,dataArray,size,timeout in ms
		//HAL_Delay(1000);
		HAL_UART_Receive_DMA(&huart2, receivedData, 13);
	  HAL_Delay(100);
		
		for(int i=0; i<6;i++){ 
		xQueueSend(items,&stub[i],10);
		i++;
	  }
		
		
  }
  /* USER CODE END StartCommunicationTask */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM10 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
